package me.cooljwb.vulnerabilitypatcher.patches;

import org.bukkit.Location;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.util.Vector;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Rouge_Entity_Spigot extends Patches implements Listener {
    long timediff = 0;
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamage(EntityDamageByEntityEvent event) {
        if(!event.getDamager().getName().equalsIgnoreCase("Arrow") && event.getEntity() instanceof LivingEntity && event.getDamager() instanceof LivingEntity) {

            LivingEntity entity = (LivingEntity) event.getEntity();
            LivingEntity damager = (LivingEntity) event.getDamager();

            Location damager_location = event.getDamager().getLocation();
            Location entity_location = event.getEntity().getLocation();

            Vector vector = damager_location.toVector().subtract(entity_location.toVector()).normalize();
            ItemStack item = damager.getEquipment().getItemInMainHand();

            if(item.getEnchantments().containsKey(Enchantment.KNOCKBACK) && item.getEnchantmentLevel(Enchantment.KNOCKBACK) >= 10) {
                event.setCancelled(true);

                vector.setY(0);
                vector.multiply(-0.5);

                if (entity.getFallDistance() > 0) {
                    vector.setY(-0.5);
                }

                else {
                    if((System.currentTimeMillis() - timediff) > 1000) {
                        vector.setY(0.4);
                        timediff = System.currentTimeMillis();
                    }

                    else
                        vector.setY(0);
                }

                event.getEntity().setVelocity(vector);
                entity.damage(event.getDamage());
            } // If too much knockback cancel event and add normal knockback.
        }
    }
}
