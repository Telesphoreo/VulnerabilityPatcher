package me.cooljwb.vulnerabilitypatcher.patches;

import java.util.ArrayList;
import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.hanging.HangingPlaceEvent;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Item_Frames extends Patches implements Listener {
    private ArrayList<Entity> entities = new ArrayList<>();
    private ArrayList<Entity> dead = new ArrayList<>();

    @EventHandler
    public void onHangingPlace(HangingPlaceEvent event) {
        if(event.getEntity().getType().name().equalsIgnoreCase("ITEM_FRAME")) {
            entities.add(event.getEntity());
            for(Entity entity : entities) {
                if(entity.isDead())
                    dead.add(entity);
            } // Clears dead item frames.

            // Avoid ConcurrentModificationException
            entities.removeAll(dead);
            dead.clear();
        }
    }

    @EventHandler
    public void onEntitySpawn(EntitySpawnEvent event) {
        if(!entities.contains(event.getEntity()) && event.getEntity().getType().name().equalsIgnoreCase("ITEM_FRAME")) {
            event.setCancelled(true); // Cancels any item frame that hasn't been placed.
            fired_countermeasure("ItemFrameEntity");
        }
    }
}
