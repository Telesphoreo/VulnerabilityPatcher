package me.cooljwb.vulnerabilitypatcher.patches;

import me.cooljwb.vulnerabilitypatcher.SMG;
import org.bukkit.Bukkit;
import org.bukkit.block.Container;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitScheduler;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Crash_Items extends Patches implements Listener {

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockDispenseEvent(BlockDispenseEvent event) {
        ItemStack item = event.getItem();

        if(isCrashItem(item)) {
            event.setCancelled(true);
            Container container = (Container) event.getBlock().getState();

            for(int c = 0; c < container.getInventory().getSize(); c++) {
                if(container.getInventory().getItem(c) != null) {
                    if (container.getInventory().getItem(c).isSimilar(event.getItem())) {
                        container.getInventory().getItem(c).setItemMeta(null);
                    }
                }
            }

            notifyViolation(event.getBlock().getType().toString(), "drop", "crash item", event.getBlock().getLocation());
        }

        else if(containsCrashItem(item)) {
            event.setCancelled(true);
            Container container = (Container) event.getBlock().getState();

            for(int c = 0; c < container.getInventory().getSize(); c++) {
                if(container.getInventory().getItem(c) != null) {
                    if (container.getInventory().getItem(c).isSimilar(event.getItem())) {
                        container.getInventory().getItem(c).setItemMeta(null);
                    }
                }
            }

            notifyViolation(event.getBlock().getType().toString(), "drop", event.getItem().getType() + " with crash item in it", event.getBlock().getLocation());
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerInteractEvent(PlayerInteractEvent event) {
        ItemStack item = event.getItem();

        if(isCrashItem(item) || containsCrashItem(item)) {
            event.setCancelled(true);
            clearItemMeta(event.getItem());

            Player player = event.getPlayer();
            msg(player, SMG.ITEM.msg);
            notifyViolation(player, "interact with", "crash item", player.getLocation());
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlaceEvent(BlockPlaceEvent event) {
        if(event.getBlockPlaced().getState() instanceof Container) {
            Container container = (Container) event.getBlockPlaced().getState();
            for(ItemStack item : container.getInventory()) {
                if(isCrashItem(item)) {
                    container.getInventory().remove(item);
                    event.setCancelled(true);

                    Player player = event.getPlayer();
                    msg(player, SMG.ITEM_IN_CONTAINER.msg);
                    notifyViolation(player, "place", event.getBlock().getType() + " crash item", event.getPlayer().getLocation());
                }
            }
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onInventoryClickEvent(InventoryClickEvent event) {
        if(isCrashItem(event.getCursor()) || containsCrashItem(event.getCursor())) {
            Player player = null;
            if(event.getWhoClicked() instanceof Player) {
                player = Bukkit.getPlayer(event.getWhoClicked().getUniqueId());

                if(!event.getEventName().equals("InventoryCreativeEvent")) {
                    msg(player, SMG.ITEM.msg);
                }
            }

            if(!event.getEventName().equals("InventoryCreativeEvent")) {
                notifyViolation(player, "acquire", "crash item", player.getLocation());
            }

            BukkitScheduler scheduler = Bukkit.getServer().getScheduler();
            scheduler.scheduleSyncDelayedTask(main, new Runnable() {
                @Override
                public void run() {
                    if(!event.getSlotType().equals(InventoryType.SlotType.OUTSIDE)) {
                        event.getWhoClicked().getInventory().getItem(event.getSlot()).setItemMeta(null);
                    }
                }
            }, 0L);
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerDropEvent(PlayerDropItemEvent event) {
        ItemStack item = event.getItemDrop().getItemStack();

        if(isCrashItem(item)) {
            event.setCancelled(true);
            clearItemMeta(event.getItemDrop().getItemStack());

            Player player = event.getPlayer();
            msg(player, SMG.ITEM.msg);
            notifyViolation(player, "drop", "crash item", player.getLocation());
        }

        debug(event);
    }
}
