package me.cooljwb.vulnerabilitypatcher.commands;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import me.cooljwb.vulnerabilitypatcher.patches.Patches;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;

public class CommandGetLag extends Patches implements CommandExecutor {

    // In-dev command.

    public static String getlag = "getlag";

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if(cmd.getName().equalsIgnoreCase("getlag")) {
            HashMap<Chunk, Integer> chunks = getChunkEntities();

            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8&lServer Information:"));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8>> &7Loaded chunks: " + getLoadedChunks().size()));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "\n"));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8&lChunk Information:"));

            int badChunks = 0;
            for(Map.Entry entry : chunks.entrySet()) {
                Chunk chunk = (Chunk) entry.getKey();
                int entities = (Integer)entry.getValue();

                //net.minecraft.server.v1_16_R2.World nmsWorld = ((CraftWorld) Bukkit.getWorld("world")).getHandle();
                //net.minecraft.server.v1_16_R2.Chunk nmsChunk = nmsWorld.getChunkAt(0, 0);

                if(entities > 32) {
                    sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8>> &7Chunk at X: %s Z: %s contains %s entities.", chunk.getX() << 4, chunk.getZ() << 4, entities)));
                    badChunks++;
                }
            }

            if(badChunks <= 0) {
                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8>> &7No faulty chunks detected."));
            }
        }
        return true;
    }

    public HashMap<Chunk, Integer> getChunkEntities() {
        HashMap<Chunk, Integer> chunks = new HashMap<>();
        for(Chunk chunk : getLoadedChunks()) {
            chunks.put(chunk, (chunk.getEntities().length + chunk.getTileEntities().length));
        }
        return chunks;
    }
    private ArrayList<Chunk> getLoadedChunks() {
        ArrayList<Chunk> chunks = new ArrayList<>();
        for(World world : Bukkit.getWorlds()) {
            chunks.addAll(Arrays.asList(world.getLoadedChunks()));
        }
        return chunks;
    }

}
